# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-23 14:58
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django_markdown.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Builder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='imię i nazwisko')),
                ('biography', django_markdown.models.MarkdownField(verbose_name='biografia')),
                ('born', models.DateField(blank=True, null=True, verbose_name='data urodzenia')),
                ('died', models.DateField(blank=True, null=True, verbose_name='data śmierci')),
            ],
            options={
                'verbose_name': 'organmistrz',
                'verbose_name_plural': 'organmistrzowie',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='nazwa')),
            ],
            options={
                'ordering': ['region', 'name'],
                'verbose_name': 'miejscowość',
                'verbose_name_plural': 'miejscowości',
            },
        ),
        migrations.CreateModel(
            name='Concert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='nazwa')),
                ('date', models.DateField(verbose_name='data')),
                ('description', django_markdown.models.MarkdownField(verbose_name='opis')),
            ],
            options={
                'ordering': ['date', 'name'],
                'verbose_name': 'koncert',
                'verbose_name_plural': 'koncerty',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('build_date', models.DateField(blank=True, null=True, verbose_name='data budowy')),
                ('comment', models.CharField(blank=True, help_text='Wykorzystywany do rozróżnienia kilku instrumentów znajudjących się w tej samej lokacji.', max_length=80, null=True, verbose_name='komentarz')),
                ('key_action', models.CharField(choices=[('mechaniczna', 'mechaniczna'), ('pneumatyczna', 'pneumatyczna'), ('elektro-pneumatyczna', 'elektro-pneumatyczna')], max_length=20, verbose_name='traktura gry')),
                ('stop_action', models.CharField(choices=[('mechaniczna', 'mechaniczna'), ('pneumatyczna', 'pneumatyczna'), ('elektro-pneumatyczna', 'elektro-pneumatyczna')], max_length=20, verbose_name='traktura rejestrów')),
                ('stops', models.IntegerField(help_text='Liczba głosów w instrumencie (bez uwzględnienia urządzeń takich jak połączenia, termolo).', verbose_name='głosy')),
                ('keyboards', models.IntegerField(help_text='Liczba manuałów w insturmencie.', verbose_name='manuały')),
                ('pedalboard', models.BooleanField(verbose_name='pedał')),
                ('description', django_markdown.models.MarkdownField(verbose_name='opis')),
                ('additional_features', models.TextField(blank=True, help_text='Opis dodatkowych urządzeń (wolne kombinacje, połączenia itp.).', null=True, verbose_name='dodatkowe urządzenia')),
                ('builder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organdb.Builder', verbose_name='budowniczy')),
            ],
            options={
                'ordering': ['location', '-stops'],
                'verbose_name': 'instrument',
                'verbose_name_plural': 'instrumenty',
            },
        ),
        migrations.CreateModel(
            name='Keyboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='nazwa')),
                ('numbered', models.BooleanField(help_text='Określa, czy numery głosów w tej klawiaturze są prezentowane na stronie instrumentu. Niezależnie od ustawienia, głosy posortowane sa według numeru głosu.', verbose_name='głosy numerowane')),
                ('min_note', models.CharField(blank=True, max_length=2, null=True, verbose_name='najniższy dźwięk')),
                ('max_note', models.CharField(blank=True, max_length=2, null=True, verbose_name='najwyższy dźwięk')),
                ('order', models.IntegerField(help_text='Klawiatury danego instrumentu wyświetlane są według rosnących wartości tego pola.', verbose_name='kolejność sortowania')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Instrument', verbose_name='instrument')),
            ],
            options={
                'ordering': ['instrument', 'order'],
                'verbose_name': 'klawiatura',
                'verbose_name_plural': 'klawiatury',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, verbose_name='nazwa')),
                ('address', models.CharField(max_length=100, verbose_name='adres')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='szerokość geograficzna')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='długość geograficzna')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.City', verbose_name='miejscowość')),
            ],
            options={
                'ordering': ['city', 'name'],
                'verbose_name': 'lokacja',
                'verbose_name_plural': 'lokacje',
            },
        ),
        migrations.CreateModel(
            name='Performer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='imię i nazwisko')),
                ('born', models.DateField(blank=True, null=True, verbose_name='data urodzenia')),
                ('died', models.DateField(blank=True, null=True, verbose_name='data śmierci')),
                ('biography', django_markdown.models.MarkdownField(verbose_name='biografia')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='', verbose_name='zdjęcie')),
            ],
            options={
                'verbose_name': 'wykonawca',
                'verbose_name_plural': 'wykonawcy',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ImageField(upload_to='', verbose_name='plik')),
                ('description', models.CharField(max_length=100, verbose_name='opis')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Instrument', verbose_name='instrument')),
            ],
            options={
                'verbose_name': 'zdjęcie',
                'verbose_name_plural': 'zdjęcia',
            },
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='recordings/', verbose_name='plik')),
                ('description', models.CharField(help_text='Krótki komentarz na temat nagrania, np. tytuł wykonywanego utworu.', max_length=120, verbose_name='opis')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Instrument', verbose_name='instrument')),
                ('performer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Performer', verbose_name='wykonawca')),
            ],
            options={
                'verbose_name': 'nagranie',
                'verbose_name_plural': 'nagrania',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='nazwa')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'region',
                'verbose_name_plural': 'regiony',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='samples/', verbose_name='plik')),
                ('description', models.CharField(max_length=100, verbose_name='opis')),
            ],
            options={
                'verbose_name': 'próbka',
                'verbose_name_plural': 'próbki',
            },
        ),
        migrations.CreateModel(
            name='Stop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(help_text='Numer głosu, wpływa na kolejność wyświetlania głosów w obrębie klawiatury, jego widoczność na stronie instrumentu jest zależna od ustawienia klawiatury.', verbose_name='numer')),
                ('name', models.CharField(help_text='Nazwa głosu, z wyłączeniem długości piszczałki.', max_length=30, verbose_name='nazwa')),
                ('length', models.CharField(blank=True, help_text='Długość piszczałki wyrażona w stopach.', max_length=5, null=True, verbose_name='długość piszczałki')),
                ('reed', models.BooleanField(help_text='Głosy językowe zwyczajowo wyróżniane są kolorem czerwonym. Zaznaczenie tego pola spowoduje wyróżnienie głosu.', verbose_name='głos językowy')),
                ('keyboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Keyboard', verbose_name='klawiatura')),
            ],
            options={
                'ordering': ['keyboard', 'number'],
                'verbose_name': 'głos',
                'verbose_name_plural': 'głosy',
            },
        ),
        migrations.CreateModel(
            name='StopFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='nazwa')),
                ('description', django_markdown.models.MarkdownField(verbose_name='opis')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'rodzina głosów',
                'verbose_name_plural': 'rodziny głosów',
            },
        ),
        migrations.CreateModel(
            name='StopType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='nazwa')),
                ('description', django_markdown.models.MarkdownField(verbose_name='opis')),
                ('families', models.ManyToManyField(blank=True, to='organdb.StopFamily', verbose_name='rodziny głosu')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'typ głosu',
                'verbose_name_plural': 'typy głosów',
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('strojenie', 'strojenie'), ('remont', 'remont'), ('przebudowa', 'przebudowa'), ('przeniesienie', 'przeniesienie'), ('inne prace', 'inne prace')], max_length=15, verbose_name='rodzaj prac')),
                ('year', models.IntegerField(verbose_name='rok')),
                ('description', django_markdown.models.MarkdownField(verbose_name='opis')),
                ('builder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Builder', verbose_name='organmistrz')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Instrument', verbose_name='instrument')),
            ],
            options={
                'ordering': ['instrument', '-year'],
                'verbose_name': 'praca',
                'verbose_name_plural': 'prace',
            },
        ),
        migrations.AddField(
            model_name='stop',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.StopType', verbose_name='typ głosu'),
        ),
        migrations.AddField(
            model_name='sample',
            name='stop_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.StopType', verbose_name='typ głosu'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Location', verbose_name='lokacja'),
        ),
        migrations.AddField(
            model_name='concert',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Instrument', verbose_name='instrument'),
        ),
        migrations.AddField(
            model_name='concert',
            name='performers',
            field=models.ManyToManyField(to='organdb.Performer', verbose_name='wykonawcy'),
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organdb.Region', verbose_name='region'),
        ),
    ]
